
stm32f4 spi driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000da0  08000da0  00010da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dac  08000dac  00010db4  2**0
                  CONTENTS
  4 .ARM          00000000  08000dac  08000dac  00010db4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dac  08000db4  00010db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dac  08000dac  00010dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000db0  08000db0  00010db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010db4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010db4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010dde  2**0
                  CONTENTS, READONLY
 14 .debug_info   000017a0  00000000  00000000  00010e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000054f  00000000  00000000  000125c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b0  00000000  00000000  00012b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000013d  00000000  00000000  00012cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000028c0  00000000  00000000  00012dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001ffc  00000000  00000000  000156bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a3f3  00000000  00000000  000176b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000650  00000000  00000000  00021aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000220fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d88 	.word	0x08000d88

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d88 	.word	0x08000d88

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <LED_GPIOInit>:
#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h"
#include "stm32f407xx_spi_driver.h"

// Inicialización del GPIO para el LED (PD12)
void LED_GPIOInit(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
    GPIO_Handle_t LEDPin;

    // Configurar el pin PD12
    LEDPin.pGPIOx = GPIOD;
 80001fe:	4b13      	ldr	r3, [pc, #76]	; (800024c <LED_GPIOInit+0x54>)
 8000200:	607b      	str	r3, [r7, #4]
    LEDPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12; // Pin PD12
 8000202:	230c      	movs	r3, #12
 8000204:	723b      	strb	r3, [r7, #8]
    LEDPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT; // Modo de salida
 8000206:	2301      	movs	r3, #1
 8000208:	727b      	strb	r3, [r7, #9]
    LEDPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW; // Velocidad baja
 800020a:	2300      	movs	r3, #0
 800020c:	72bb      	strb	r3, [r7, #10]
    LEDPin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Salida push-pull
 800020e:	2300      	movs	r3, #0
 8000210:	733b      	strb	r3, [r7, #12]
    LEDPin.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD; // Sin pull-up/pull-down
 8000212:	2300      	movs	r3, #0
 8000214:	72fb      	strb	r3, [r7, #11]

    GPIO_Init(&LEDPin);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fba1 	bl	8000960 <GPIO_Init>

    // Configurar el pin PD13 (LED Naranja)

    LEDPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800021e:	230d      	movs	r3, #13
 8000220:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LEDPin);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fb9b 	bl	8000960 <GPIO_Init>

    // Configurar el pin PD14 (LED Rojo)
    LEDPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800022a:	230e      	movs	r3, #14
 800022c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LEDPin);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fb95 	bl	8000960 <GPIO_Init>

    // Configurar el pin PD15 (LED Azul)
    LEDPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000236:	230f      	movs	r3, #15
 8000238:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&LEDPin);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fb8f 	bl	8000960 <GPIO_Init>
}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40020c00 	.word	0x40020c00

08000250 <LED_On>:


void LED_On(uint8_t PinNumber) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteToOutputPin(GPIOD, PinNumber, GPIO_PIN_SET);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2201      	movs	r2, #1
 800025e:	4619      	mov	r1, r3
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <LED_On+0x20>)
 8000262:	f000 fd35 	bl	8000cd0 <GPIO_WriteToOutputPin>
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020c00 	.word	0x40020c00

08000274 <LED_Off>:

void LED_Off(uint8_t PinNumber) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
    GPIO_WriteToOutputPin(GPIOD, PinNumber, GPIO_PIN_RESET);
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2200      	movs	r2, #0
 8000282:	4619      	mov	r1, r3
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <LED_Off+0x20>)
 8000286:	f000 fd23 	bl	8000cd0 <GPIO_WriteToOutputPin>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020c00 	.word	0x40020c00

08000298 <toggle_LED>:

// Función para alternar el estado del LED
void toggle_LED(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800029c:	210c      	movs	r1, #12
 800029e:	4802      	ldr	r0, [pc, #8]	; (80002a8 <toggle_LED+0x10>)
 80002a0:	f000 fd3a 	bl	8000d18 <GPIO_ToggleOutputPin>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40020c00 	.word	0x40020c00

080002ac <delay>:

// Función de retardo simple
void delay(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < 800000; i++); // Ajustar según la velocidad del reloj
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e002      	b.n	80002be <delay+0x12>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3301      	adds	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <delay+0x28>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d9f8      	bls.n	80002b8 <delay+0xc>
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	000c34ff 	.word	0x000c34ff

080002d8 <SPI1_GPIOInits>:

void SPI1_GPIOInits(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;

    SPIPins.pGPIOx = GPIOA;
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <SPI1_GPIOInits+0x4c>)
 80002e0:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002e2:	2302      	movs	r3, #2
 80002e4:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5; //AF5 para SPI1
 80002e6:	2305      	movs	r3, #5
 80002e8:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002ea:	2300      	movs	r3, #0
 80002ec:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80002ee:	2300      	movs	r3, #0
 80002f0:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002f2:	2303      	movs	r3, #3
 80002f4:	72bb      	strb	r3, [r7, #10]

    // SCLK
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80002f6:	2305      	movs	r3, #5
 80002f8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fb2f 	bl	8000960 <GPIO_Init>

    // MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000302:	2307      	movs	r3, #7
 8000304:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fb29 	bl	8000960 <GPIO_Init>
    // MISO
    // SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
    // GPIO_Init(&SPIPins);

    // NSS
     SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 800030e:	2304      	movs	r3, #4
 8000310:	723b      	strb	r3, [r7, #8]
     GPIO_Init(&SPIPins);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fb23 	bl	8000960 <GPIO_Init>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020000 	.word	0x40020000

08000328 <SPI1_Inits>:

void SPI1_Inits(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI1handle;

    SPI1handle.pSPIx = SPI1;
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <SPI1_Inits+0x38>)
 8000330:	603b      	str	r3, [r7, #0]
    SPI1handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000332:	2301      	movs	r3, #1
 8000334:	717b      	strb	r3, [r7, #5]
    SPI1handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000336:	2301      	movs	r3, #1
 8000338:	713b      	strb	r3, [r7, #4]
    SPI1handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // genera sclk de 8MHz
 800033a:	2300      	movs	r3, #0
 800033c:	71bb      	strb	r3, [r7, #6]
    SPI1handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800033e:	2300      	movs	r3, #0
 8000340:	71fb      	strb	r3, [r7, #7]
    SPI1handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 8000342:	2301      	movs	r3, #1
 8000344:	723b      	strb	r3, [r7, #8]
    SPI1handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000346:	2300      	movs	r3, #0
 8000348:	727b      	strb	r3, [r7, #9]
    //SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // gestión de esclavo por software habilitada para pin NSS
    SPI1handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 800034a:	2300      	movs	r3, #0
 800034c:	72bb      	strb	r3, [r7, #10]
    SPI_Init(&SPI1handle);
 800034e:	463b      	mov	r3, r7
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f911 	bl	8000578 <SPI_Init>



}
 8000356:	bf00      	nop
 8000358:	3720      	adds	r7, #32
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40013000 	.word	0x40013000

08000364 <main>:

int main(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b08a      	sub	sp, #40	; 0x28
 8000368:	af00      	add	r7, sp, #0
    char user_data[] = "Hello world";
 800036a:	4a3e      	ldr	r2, [pc, #248]	; (8000464 <main+0x100>)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	ca07      	ldmia	r2, {r0, r1, r2}
 8000372:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Inicializar el GPIO para el LED
    LED_GPIOInit();
 8000376:	f7ff ff3f 	bl	80001f8 <LED_GPIOInit>
    // Encender cada LED de forma secuencial para prueba
    LED_On(GPIO_PIN_NO_13); // LED Naranja
 800037a:	200d      	movs	r0, #13
 800037c:	f7ff ff68 	bl	8000250 <LED_On>
    delay();
 8000380:	f7ff ff94 	bl	80002ac <delay>
    LED_Off(GPIO_PIN_NO_13);
 8000384:	200d      	movs	r0, #13
 8000386:	f7ff ff75 	bl	8000274 <LED_Off>

    LED_On(GPIO_PIN_NO_14); // LED Rojo
 800038a:	200e      	movs	r0, #14
 800038c:	f7ff ff60 	bl	8000250 <LED_On>
    delay();
 8000390:	f7ff ff8c 	bl	80002ac <delay>
    LED_Off(GPIO_PIN_NO_14);
 8000394:	200e      	movs	r0, #14
 8000396:	f7ff ff6d 	bl	8000274 <LED_Off>

    LED_On(GPIO_PIN_NO_15); // LED Azul
 800039a:	200f      	movs	r0, #15
 800039c:	f7ff ff58 	bl	8000250 <LED_On>
    delay();
 80003a0:	f7ff ff84 	bl	80002ac <delay>
    LED_Off(GPIO_PIN_NO_15);
 80003a4:	200f      	movs	r0, #15
 80003a6:	f7ff ff65 	bl	8000274 <LED_Off>

    // Inicializar los pines GPIO para comportarse como pines SPI1
    SPI1_GPIOInits();
 80003aa:	f7ff ff95 	bl	80002d8 <SPI1_GPIOInits>

    // Inicializar el periférico SPI1
    SPI1_Inits();
 80003ae:	f7ff ffbb 	bl	8000328 <SPI1_Inits>

    // Configurar NSS a alto inicialmente (deseleccionar esclavo)
        GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_4, GPIO_PIN_SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	2104      	movs	r1, #4
 80003b6:	482c      	ldr	r0, [pc, #176]	; (8000468 <main+0x104>)
 80003b8:	f000 fc8a 	bl	8000cd0 <GPIO_WriteToOutputPin>

        // Esperar un breve momento antes de comenzar la transmisión
            delay();
 80003bc:	f7ff ff76 	bl	80002ac <delay>

            // Configurar NSS a bajo para seleccionar el esclavo
            GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_4, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2104      	movs	r1, #4
 80003c4:	4828      	ldr	r0, [pc, #160]	; (8000468 <main+0x104>)
 80003c6:	f000 fc83 	bl	8000cd0 <GPIO_WriteToOutputPin>

    // Hacer NSS internamente alto y evitar error MODF (problema del maestro)
    //SPI_SSIConfig(SPI1, ENABLE);

    // Habilitar el periférico SPI
    SPI_PeripheralControl(SPI1, ENABLE);
 80003ca:	2101      	movs	r1, #1
 80003cc:	4827      	ldr	r0, [pc, #156]	; (800046c <main+0x108>)
 80003ce:	f000 f994 	bl	80006fa <SPI_PeripheralControl>

    // Verificar registro RCC->APB2ENR
    volatile uint32_t apb2enr = RCC->APB2ENR;
 80003d2:	4b27      	ldr	r3, [pc, #156]	; (8000470 <main+0x10c>)
 80003d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003d6:	61bb      	str	r3, [r7, #24]

    // Verificar registros CR1 y CR2 de SPI1
    volatile uint32_t cr1 = SPI1->CR1;
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <main+0x108>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	617b      	str	r3, [r7, #20]
    volatile uint32_t cr2 = SPI1->CR2;
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <main+0x108>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	613b      	str	r3, [r7, #16]

    // Encender el LED Naranja si el SPI está habilitado (SPE bit en CR1)
    if (SPI1->CR1 & (1 << SPI_CR1_SPE)) {
 80003e4:	4b21      	ldr	r3, [pc, #132]	; (800046c <main+0x108>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d002      	beq.n	80003f6 <main+0x92>
         LED_On(GPIO_PIN_NO_13); // LED Naranja encendido
 80003f0:	200d      	movs	r0, #13
 80003f2:	f7ff ff2d 	bl	8000250 <LED_On>
    }


    // Verifica CR1 y SR antes de enviar datos
    volatile uint32_t debug_CR1_before = SPI1->CR1;
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <main+0x108>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	60fb      	str	r3, [r7, #12]
    volatile uint32_t debug_SR_before = SPI1->SR;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <main+0x108>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	60bb      	str	r3, [r7, #8]

   // Enviar datos a través del SPI y encender LED Rojo si TXE (Transmitter Empty) está configurado
    if (SPI1->SR & (1 << SPI_SR_TXE)) {
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <main+0x108>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	f003 0302 	and.w	r3, r3, #2
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <main+0xb0>
        LED_On(GPIO_PIN_NO_14); // LED Rojo encendido
 800040e:	200e      	movs	r0, #14
 8000410:	f7ff ff1e 	bl	8000250 <LED_On>
    }

    // Enviar datos a través del SPI
    SPI_Send(SPI1, (uint8_t*)user_data, strlen(user_data));
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff fee5 	bl	80001e8 <strlen>
 800041e:	4602      	mov	r2, r0
 8000420:	f107 031c 	add.w	r3, r7, #28
 8000424:	4619      	mov	r1, r3
 8000426:	4811      	ldr	r0, [pc, #68]	; (800046c <main+0x108>)
 8000428:	f000 f901 	bl	800062e <SPI_Send>

    // Verifica CR1 y SR después de enviar datos
    volatile uint32_t debug_CR1_after = SPI1->CR1;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <main+0x108>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	607b      	str	r3, [r7, #4]
    volatile uint32_t debug_SR_after = SPI1->SR;
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <main+0x108>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	603b      	str	r3, [r7, #0]

    // Apagar el LED Rojo y encender el LED Azul si BSY (Busy) está desactivado
        if (!(SPI1->SR & (1 << SPI_SR_BSY))) {
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <main+0x108>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000440:	2b00      	cmp	r3, #0
 8000442:	d105      	bne.n	8000450 <main+0xec>
            LED_Off(GPIO_PIN_NO_14); // Apagar LED Rojo
 8000444:	200e      	movs	r0, #14
 8000446:	f7ff ff15 	bl	8000274 <LED_Off>
            LED_On(GPIO_PIN_NO_15);  // Encender LED Azul
 800044a:	200f      	movs	r0, #15
 800044c:	f7ff ff00 	bl	8000250 <LED_On>
        }

        // Configurar NSS a alto para deseleccionar el esclavo
            GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_4, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2104      	movs	r1, #4
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <main+0x104>)
 8000456:	f000 fc3b 	bl	8000cd0 <GPIO_WriteToOutputPin>

    while(1) {
        // Alternar el estado del LED
        toggle_LED();
 800045a:	f7ff ff1d 	bl	8000298 <toggle_LED>
        // Esperar 100 ms
        delay();
 800045e:	f7ff ff25 	bl	80002ac <delay>
        toggle_LED();
 8000462:	e7fa      	b.n	800045a <main+0xf6>
 8000464:	08000da0 	.word	0x08000da0
 8000468:	40020000 	.word	0x40020000
 800046c:	40013000 	.word	0x40013000
 8000470:	40023800 	.word	0x40023800

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000478:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 fc4d 	bl	8000d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff ff5d 	bl	8000364 <main>

080004aa <LoopForever>:

LoopForever:
    b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b8:	08000db4 	.word	0x08000db4
  ldr r2, =_sbss
 80004bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c0:	2000001c 	.word	0x2000001c

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <SPI_PeripheralClockControl>:

#include "stm32f407xx_spi_driver.h"

// spi peripheral clock control

void SPI_PeripheralClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE) {
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d120      	bne.n	800051c <SPI_PeripheralClockControl+0x54>

		if (pSPIx == SPI1) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a22      	ldr	r2, [pc, #136]	; (8000568 <SPI_PeripheralClockControl+0xa0>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <SPI_PeripheralClockControl+0x28>

			SPI1_CLOCK_ENABLE();
 80004e2:	4b22      	ldr	r3, [pc, #136]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 80004e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004e6:	4a21      	ldr	r2, [pc, #132]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 80004e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ec:	6453      	str	r3, [r2, #68]	; 0x44

		}

	}

}
 80004ee:	e035      	b.n	800055c <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI2) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <SPI_PeripheralClockControl+0xa8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d106      	bne.n	8000506 <SPI_PeripheralClockControl+0x3e>
			SPI2_CLOCK_ENABLE();
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 80004fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000502:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000504:	e02a      	b.n	800055c <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI3) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a1a      	ldr	r2, [pc, #104]	; (8000574 <SPI_PeripheralClockControl+0xac>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d126      	bne.n	800055c <SPI_PeripheralClockControl+0x94>
			SPI3_CLOCK_ENABLE();
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 8000510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 8000514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000518:	6413      	str	r3, [r2, #64]	; 0x40
}
 800051a:	e01f      	b.n	800055c <SPI_PeripheralClockControl+0x94>
		if (pSPIx == SPI1) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <SPI_PeripheralClockControl+0xa0>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d106      	bne.n	8000532 <SPI_PeripheralClockControl+0x6a>
			SPI1_CLOCK_DISABLE();
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 8000526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000528:	4a10      	ldr	r2, [pc, #64]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 800052a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800052e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000530:	e014      	b.n	800055c <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI2){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <SPI_PeripheralClockControl+0xa8>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d106      	bne.n	8000548 <SPI_PeripheralClockControl+0x80>
			SPI2_CLOCK_DISABLE();
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 800053c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 8000540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000544:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000546:	e009      	b.n	800055c <SPI_PeripheralClockControl+0x94>
		}else if (pSPIx == SPI3) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <SPI_PeripheralClockControl+0xac>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d105      	bne.n	800055c <SPI_PeripheralClockControl+0x94>
			SPI3_CLOCK_DISABLE();
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <SPI_PeripheralClockControl+0xa4>)
 8000556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40013000 	.word	0x40013000
 800056c:	40023800 	.word	0x40023800
 8000570:	40003800 	.word	0x40003800
 8000574:	40003c00 	.word	0x40003c00

08000578 <SPI_Init>:
// init and deinit apis
void SPI_Init(SPI_Handle_t *pSPIHandle) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	// enable the clock
	SPI_PeripheralClockControl(pSPIHandle->pSPIx, ENABLE ) ;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2101      	movs	r1, #1
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff9e 	bl	80004c8 <SPI_PeripheralClockControl>

// first configure the spi_cr1 register

	uint32_t tempreg = 0 ;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]

		// configure the the spi device mode
		tempreg |=  ( pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR) ;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4313      	orrs	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]

	// configure the bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	795b      	ldrb	r3, [r3, #5]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d104      	bne.n	80005b0 <SPI_Init+0x38>

		// BIDIMODE should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE) ;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e014      	b.n	80005da <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d104      	bne.n	80005c2 <SPI_Init+0x4a>

		// BIDIMODE should be set
		tempreg |=  ( 1 << SPI_CR1_BIDIMODE) ;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e00b      	b.n	80005da <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d107      	bne.n	80005da <SPI_Init+0x62>

		// BIDIMODE should be cleared ;
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE) ;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005d0:	60fb      	str	r3, [r7, #12]

		// RXOONLY bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY) ;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005d8:	60fb      	str	r3, [r7, #12]

	}

	// configure spi clock speed
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR) ;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	799b      	ldrb	r3, [r3, #6]
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	461a      	mov	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	60fb      	str	r3, [r7, #12]

	// configure spi dff mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF) ;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	79db      	ldrb	r3, [r3, #7]
 80005ec:	02db      	lsls	r3, r3, #11
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]

	// configure spi cpol
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL) ;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7a1b      	ldrb	r3, [r3, #8]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4313      	orrs	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]

	// configure spi cpha
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPHA) ;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	7a1b      	ldrb	r3, [r3, #8]
 8000608:	461a      	mov	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4313      	orrs	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]

	// configure spi ssm
	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM) ;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7a9b      	ldrb	r3, [r3, #10]
 8000614:	025b      	lsls	r3, r3, #9
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4313      	orrs	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg ;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	601a      	str	r2, [r3, #0]

}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <SPI_Send>:
	}


}
// Spi send and receive apis
void SPI_Send(SPI_RegDef_t *pSPIx , uint8_t *pTxBuffer , uint32_t length) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b08a      	sub	sp, #40	; 0x28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]

	 // Clear RXNE by reading DR and SR
	    uint8_t temp = pSPIx->DR;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    temp = pSPIx->SR;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    (void)temp;  // Prevent compiler warning


	while(length > 0 ) {
 800064a:	e033      	b.n	80006b4 <SPI_Send+0x86>

		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET){}
 800064c:	bf00      	nop
 800064e:	2102      	movs	r1, #2
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f000 f83f 	bl	80006d4 <SPI_GetFlagStatus>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d0f8      	beq.n	800064e <SPI_Send+0x20>

		 // Verificar DR y SR antes de escribir
		        volatile uint32_t debug_DR_before = pSPIx->DR;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	623b      	str	r3, [r7, #32]
		        volatile uint32_t debug_SR_before = pSPIx->SR;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	61fb      	str	r3, [r7, #28]
		        volatile uint32_t debug_CR1_before_send = pSPIx->CR1;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	61bb      	str	r3, [r7, #24]

		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF))) {
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00b      	beq.n	8000692 <SPI_Send+0x64>

			// 16 bit data format
			// load 16 bit of data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer) ;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	60da      	str	r2, [r3, #12]
			length-=2 ;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3b02      	subs	r3, #2
 8000688:	607b      	str	r3, [r7, #4]
 		    pTxBuffer+=2 ; //Incrementing buffer in 2 bytes 16bit format
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	3302      	adds	r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	e00a      	b.n	80006a8 <SPI_Send+0x7a>

		} else {
			// load 8 bit data into DR
			pSPIx->DR = *pTxBuffer ;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	60da      	str	r2, [r3, #12]
			length-- ;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
			pTxBuffer++ ;
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]

		}

		// Verificar DR después de escribir
		        volatile uint32_t debug_DR_after = pSPIx->DR;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	617b      	str	r3, [r7, #20]
		        volatile uint32_t debug_SR_after = pSPIx->SR;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	613b      	str	r3, [r7, #16]
	while(length > 0 ) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1c8      	bne.n	800064c <SPI_Send+0x1e>
	}
	 // Wait until SPI is not busy
	    while(SPI_GetFlagStatus(pSPIx, SPI_BSY_FLAG) == FLAG_SET);
 80006ba:	bf00      	nop
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f000 f808 	bl	80006d4 <SPI_GetFlagStatus>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d0f8      	beq.n	80006bc <SPI_Send+0x8e>

}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SPI_GetFlagStatus>:
		}
     }
  }

//spi get flag status
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName ){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]

	if ((pSPIx->SR &  (FlagName))) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	4013      	ands	r3, r2
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SPI_GetFlagStatus+0x1a>

		return FLAG_SET ;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET ;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <SPI_PeripheralControl>:

// Spi peripheral enable

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	460b      	mov	r3, r1
 8000704:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000706:	78fb      	ldrb	r3, [r7, #3]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d106      	bne.n	800071a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000718:	e005      	b.n	8000726 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <GPIO_PeripClockControl>:
#include "stm32f407xx_gpio_driver.h"
#include <stdio.h>


// clock control api for gpio
void GPIO_PeripClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi) {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d178      	bne.n	8000834 <GPIO_PeripClockControl+0x104>

		if (pGPIOx == GPIOA) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a7a      	ldr	r2, [pc, #488]	; (8000930 <GPIO_PeripClockControl+0x200>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <GPIO_PeripClockControl+0x28>
			GPIOA_CLOCK_ENABLE();
 800074a:	4b7a      	ldr	r3, [pc, #488]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a79      	ldr	r2, [pc, #484]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_CLOCK_DISABLE();
		}else if (pGPIOx == GPIOK){
			GPIOK_CLOCK_DISABLE();
		}
	}
}
 8000756:	e0e5      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOB) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a77      	ldr	r2, [pc, #476]	; (8000938 <GPIO_PeripClockControl+0x208>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <GPIO_PeripClockControl+0x3e>
			GPIOB_CLOCK_ENABLE();
 8000760:	4b74      	ldr	r3, [pc, #464]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a73      	ldr	r2, [pc, #460]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000766:	f043 0302 	orr.w	r3, r3, #2
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076c:	e0da      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOC){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a72      	ldr	r2, [pc, #456]	; (800093c <GPIO_PeripClockControl+0x20c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <GPIO_PeripClockControl+0x54>
			GPIOC_CLOCK_ENABLE();
 8000776:	4b6f      	ldr	r3, [pc, #444]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a6e      	ldr	r2, [pc, #440]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000782:	e0cf      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOD){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a6e      	ldr	r2, [pc, #440]	; (8000940 <GPIO_PeripClockControl+0x210>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <GPIO_PeripClockControl+0x6a>
			GPIOD_CLOCK_ENABLE();
 800078c:	4b69      	ldr	r3, [pc, #420]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	4a68      	ldr	r2, [pc, #416]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000798:	e0c4      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOE){
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a69      	ldr	r2, [pc, #420]	; (8000944 <GPIO_PeripClockControl+0x214>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d106      	bne.n	80007b0 <GPIO_PeripClockControl+0x80>
			GPIOE_CLOCK_ENABLE();
 80007a2:	4b64      	ldr	r3, [pc, #400]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a63      	ldr	r2, [pc, #396]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ae:	e0b9      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOF){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a65      	ldr	r2, [pc, #404]	; (8000948 <GPIO_PeripClockControl+0x218>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <GPIO_PeripClockControl+0x96>
			GPIOF_CLOCK_ENABLE();
 80007b8:	4b5e      	ldr	r3, [pc, #376]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a5d      	ldr	r2, [pc, #372]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007be:	f043 0320 	orr.w	r3, r3, #32
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c4:	e0ae      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOG){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a60      	ldr	r2, [pc, #384]	; (800094c <GPIO_PeripClockControl+0x21c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d106      	bne.n	80007dc <GPIO_PeripClockControl+0xac>
			GPIOG_CLOCK_ENABLE();
 80007ce:	4b59      	ldr	r3, [pc, #356]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a58      	ldr	r2, [pc, #352]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007da:	e0a3      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOH){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a5c      	ldr	r2, [pc, #368]	; (8000950 <GPIO_PeripClockControl+0x220>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d106      	bne.n	80007f2 <GPIO_PeripClockControl+0xc2>
			GPIOH_CLOCK_ENABLE();
 80007e4:	4b53      	ldr	r3, [pc, #332]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a52      	ldr	r2, [pc, #328]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f0:	e098      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOI){
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a57      	ldr	r2, [pc, #348]	; (8000954 <GPIO_PeripClockControl+0x224>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <GPIO_PeripClockControl+0xd8>
			GPIOI_CLOCK_ENABLE();
 80007fa:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a4d      	ldr	r2, [pc, #308]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000806:	e08d      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a53      	ldr	r2, [pc, #332]	; (8000958 <GPIO_PeripClockControl+0x228>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d106      	bne.n	800081e <GPIO_PeripClockControl+0xee>
			GPIOJ_CLOCK_ENABLE();
 8000810:	4b48      	ldr	r3, [pc, #288]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	4a47      	ldr	r2, [pc, #284]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081c:	e082      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOK){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a4e      	ldr	r2, [pc, #312]	; (800095c <GPIO_PeripClockControl+0x22c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d17e      	bne.n	8000924 <GPIO_PeripClockControl+0x1f4>
			GPIOK_CLOCK_ENABLE();
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a42      	ldr	r2, [pc, #264]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800082c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000832:	e077      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		if (pGPIOx == GPIOA) {
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a3e      	ldr	r2, [pc, #248]	; (8000930 <GPIO_PeripClockControl+0x200>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <GPIO_PeripClockControl+0x11a>
			GPIOA_CLOCK_DISABLE();
 800083c:	4b3d      	ldr	r3, [pc, #244]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	4a3c      	ldr	r2, [pc, #240]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000842:	f023 0301 	bic.w	r3, r3, #1
 8000846:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000848:	e06c      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOB) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a3a      	ldr	r2, [pc, #232]	; (8000938 <GPIO_PeripClockControl+0x208>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <GPIO_PeripClockControl+0x130>
			GPIOB_CLOCK_DISABLE();
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a37      	ldr	r2, [pc, #220]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000858:	f023 0302 	bic.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085e:	e061      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOC){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a36      	ldr	r2, [pc, #216]	; (800093c <GPIO_PeripClockControl+0x20c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d106      	bne.n	8000876 <GPIO_PeripClockControl+0x146>
			GPIOC_CLOCK_DISABLE();
 8000868:	4b32      	ldr	r3, [pc, #200]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a31      	ldr	r2, [pc, #196]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800086e:	f023 0304 	bic.w	r3, r3, #4
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000874:	e056      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOD){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a31      	ldr	r2, [pc, #196]	; (8000940 <GPIO_PeripClockControl+0x210>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d106      	bne.n	800088c <GPIO_PeripClockControl+0x15c>
			GPIOD_CLOCK_DISABLE();
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000884:	f023 0308 	bic.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
}
 800088a:	e04b      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOE){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a2d      	ldr	r2, [pc, #180]	; (8000944 <GPIO_PeripClockControl+0x214>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d106      	bne.n	80008a2 <GPIO_PeripClockControl+0x172>
			GPIOE_CLOCK_DISABLE();
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a26      	ldr	r2, [pc, #152]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800089a:	f023 0310 	bic.w	r3, r3, #16
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a0:	e040      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOF){
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a28      	ldr	r2, [pc, #160]	; (8000948 <GPIO_PeripClockControl+0x218>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d106      	bne.n	80008b8 <GPIO_PeripClockControl+0x188>
			GPIOF_CLOCK_DISABLE();
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008b0:	f023 0320 	bic.w	r3, r3, #32
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b6:	e035      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOG){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a24      	ldr	r2, [pc, #144]	; (800094c <GPIO_PeripClockControl+0x21c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d106      	bne.n	80008ce <GPIO_PeripClockControl+0x19e>
			GPIOG_CLOCK_DISABLE();
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008cc:	e02a      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOH){
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <GPIO_PeripClockControl+0x220>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d106      	bne.n	80008e4 <GPIO_PeripClockControl+0x1b4>
			GPIOH_CLOCK_DISABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008e2:	e01f      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOI){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <GPIO_PeripClockControl+0x224>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d106      	bne.n	80008fa <GPIO_PeripClockControl+0x1ca>
			GPIOI_CLOCK_DISABLE();
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a10      	ldr	r2, [pc, #64]	; (8000934 <GPIO_PeripClockControl+0x204>)
 80008f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f8:	e014      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOJ){
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <GPIO_PeripClockControl+0x228>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d106      	bne.n	8000910 <GPIO_PeripClockControl+0x1e0>
			GPIOJ_CLOCK_DISABLE();
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <GPIO_PeripClockControl+0x204>)
 8000908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090e:	e009      	b.n	8000924 <GPIO_PeripClockControl+0x1f4>
		}else if (pGPIOx == GPIOK){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <GPIO_PeripClockControl+0x22c>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d105      	bne.n	8000924 <GPIO_PeripClockControl+0x1f4>
			GPIOK_CLOCK_DISABLE();
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a05      	ldr	r2, [pc, #20]	; (8000934 <GPIO_PeripClockControl+0x204>)
 800091e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40020000 	.word	0x40020000
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400
 800093c:	40020800 	.word	0x40020800
 8000940:	40020c00 	.word	0x40020c00
 8000944:	40021000 	.word	0x40021000
 8000948:	40021400 	.word	0x40021400
 800094c:	40021800 	.word	0x40021800
 8000950:	40021c00 	.word	0x40021c00
 8000954:	40022000 	.word	0x40022000
 8000958:	40022400 	.word	0x40022400
 800095c:	40022800 	.word	0x40022800

08000960 <GPIO_Init>:

// gpio init and deinit apis
void GPIO_Init(GPIO_Handle_t* pGPIOHandle) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
			uint32_t temp = 0 ;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

			// enable the peripheral clock
			GPIO_PeripClockControl(pGPIOHandle->pGPIOx, ENABLE) ;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fedc 	bl	8000730 <GPIO_PeripClockControl>

	// configure the modes of a gpio pin
		// configuring non interrupt modes
		if ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOGE ) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	795b      	ldrb	r3, [r3, #5]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d81f      	bhi.n	80009c0 <GPIO_Init+0x60>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)) ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	461a      	mov	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	4619      	mov	r1, r3
 800099e:	2303      	movs	r3, #3
 80009a0:	408b      	lsls	r3, r1
 80009a2:	43db      	mvns	r3, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	400a      	ands	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp ;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e0e3      	b.n	8000b88 <GPIO_Init+0x228>


		}else{
			// it is interrupt mode

			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	795b      	ldrb	r3, [r3, #5]
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d117      	bne.n	80009f8 <GPIO_Init+0x98>

				// configure the ftsr register
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 80009c8:	4b51      	ldr	r3, [pc, #324]	; (8000b10 <GPIO_Init+0x1b0>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	7912      	ldrb	r2, [r2, #4]
 80009d0:	4611      	mov	r1, r2
 80009d2:	2201      	movs	r2, #1
 80009d4:	408a      	lsls	r2, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a4d      	ldr	r2, [pc, #308]	; (8000b10 <GPIO_Init+0x1b0>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	60d3      	str	r3, [r2, #12]
				// clear the rtsr bit
				EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 80009de:	4b4c      	ldr	r3, [pc, #304]	; (8000b10 <GPIO_Init+0x1b0>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	7912      	ldrb	r2, [r2, #4]
 80009e6:	4611      	mov	r1, r2
 80009e8:	2201      	movs	r2, #1
 80009ea:	408a      	lsls	r2, r1
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	4611      	mov	r1, r2
 80009f0:	4a47      	ldr	r2, [pc, #284]	; (8000b10 <GPIO_Init+0x1b0>)
 80009f2:	400b      	ands	r3, r1
 80009f4:	6093      	str	r3, [r2, #8]
 80009f6:	e035      	b.n	8000a64 <GPIO_Init+0x104>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	795b      	ldrb	r3, [r3, #5]
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	d117      	bne.n	8000a30 <GPIO_Init+0xd0>

				// configure the rtsr register
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	7912      	ldrb	r2, [r2, #4]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	408a      	lsls	r2, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6093      	str	r3, [r2, #8]
				// clear the rtsr bit
				EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	7912      	ldrb	r2, [r2, #4]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	2201      	movs	r2, #1
 8000a22:	408a      	lsls	r2, r1
 8000a24:	43d2      	mvns	r2, r2
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a39      	ldr	r2, [pc, #228]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	60d3      	str	r3, [r2, #12]
 8000a2e:	e019      	b.n	8000a64 <GPIO_Init+0x104>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	795b      	ldrb	r3, [r3, #5]
 8000a34:	2b06      	cmp	r3, #6
 8000a36:	d115      	bne.n	8000a64 <GPIO_Init+0x104>
				// configure the rftsr register
				// configure the rtsr register
				EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	7912      	ldrb	r2, [r2, #4]
 8000a40:	4611      	mov	r1, r2
 8000a42:	2201      	movs	r2, #1
 8000a44:	408a      	lsls	r2, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	4a31      	ldr	r2, [pc, #196]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	6093      	str	r3, [r2, #8]
				// clear the rtsr bit
				EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	7912      	ldrb	r2, [r2, #4]
 8000a56:	4611      	mov	r1, r2
 8000a58:	2201      	movs	r2, #1
 8000a5a:	408a      	lsls	r2, r1
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4a2c      	ldr	r2, [pc, #176]	; (8000b10 <GPIO_Init+0x1b0>)
 8000a60:	430b      	orrs	r3, r1
 8000a62:	60d3      	str	r3, [r2, #12]

			}

			// configure the gpio port selection in syscfg_exticr
				// syscfg SYSCFG_EXTICR[x] configures which pin of which port issues interrupt
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4  ;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	791b      	ldrb	r3, [r3, #4]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4  ;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx)) ;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <GPIO_Init+0x1b4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d05f      	beq.n	8000b40 <GPIO_Init+0x1e0>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <GPIO_Init+0x1b8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d040      	beq.n	8000b0c <GPIO_Init+0x1ac>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <GPIO_Init+0x1bc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d039      	beq.n	8000b08 <GPIO_Init+0x1a8>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <GPIO_Init+0x1c0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d032      	beq.n	8000b04 <GPIO_Init+0x1a4>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <GPIO_Init+0x1c4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d02b      	beq.n	8000b00 <GPIO_Init+0x1a0>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <GPIO_Init+0x1c8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d024      	beq.n	8000afc <GPIO_Init+0x19c>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <GPIO_Init+0x1cc>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d01d      	beq.n	8000af8 <GPIO_Init+0x198>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <GPIO_Init+0x1d0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d016      	beq.n	8000af4 <GPIO_Init+0x194>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <GPIO_Init+0x1d4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d00f      	beq.n	8000af0 <GPIO_Init+0x190>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <GPIO_Init+0x1d8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d008      	beq.n	8000aec <GPIO_Init+0x18c>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <GPIO_Init+0x1dc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <GPIO_Init+0x188>
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	e02c      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e02a      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000aec:	2309      	movs	r3, #9
 8000aee:	e028      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000af0:	2308      	movs	r3, #8
 8000af2:	e026      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000af4:	2307      	movs	r3, #7
 8000af6:	e024      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000af8:	2306      	movs	r3, #6
 8000afa:	e022      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000afc:	2305      	movs	r3, #5
 8000afe:	e020      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000b00:	2304      	movs	r3, #4
 8000b02:	e01e      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e01c      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e01a      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e018      	b.n	8000b42 <GPIO_Init+0x1e2>
 8000b10:	40013c00 	.word	0x40013c00
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021800 	.word	0x40021800
 8000b30:	40021c00 	.word	0x40021c00
 8000b34:	40022000 	.word	0x40022000
 8000b38:	40022400 	.word	0x40022400
 8000b3c:	40022800 	.word	0x40022800
 8000b40:	2300      	movs	r3, #0
 8000b42:	747b      	strb	r3, [r7, #17]
				// enabling the clock for syscfg before configuring the registers for syscfg
			SYSCFG_CLOCK_ENABLE() ;
 8000b44:	4b5f      	ldr	r3, [pc, #380]	; (8000cc4 <GPIO_Init+0x364>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	4a5e      	ldr	r2, [pc, #376]	; (8000cc4 <GPIO_Init+0x364>)
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4e:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] |= (portcode << ( temp2 * 4) );
 8000b50:	4a5d      	ldr	r2, [pc, #372]	; (8000cc8 <GPIO_Init+0x368>)
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	3302      	adds	r3, #2
 8000b56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b5a:	7c79      	ldrb	r1, [r7, #17]
 8000b5c:	7cbb      	ldrb	r3, [r7, #18]
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	4958      	ldr	r1, [pc, #352]	; (8000cc8 <GPIO_Init+0x368>)
 8000b68:	7cfb      	ldrb	r3, [r7, #19]
 8000b6a:	4302      	orrs	r2, r0
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			// enable the interrupt delivery in exti
			EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000b72:	4b56      	ldr	r3, [pc, #344]	; (8000ccc <GPIO_Init+0x36c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	7912      	ldrb	r2, [r2, #4]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	408a      	lsls	r2, r1
 8000b80:	4611      	mov	r1, r2
 8000b82:	4a52      	ldr	r2, [pc, #328]	; (8000ccc <GPIO_Init+0x36c>)
 8000b84:	430b      	orrs	r3, r1
 8000b86:	6013      	str	r3, [r2, #0]

		}
				temp = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

	// configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	799b      	ldrb	r3, [r3, #6]
 8000b90:	461a      	mov	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	791b      	ldrb	r3, [r3, #4]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	2303      	movs	r3, #3
 8000bac:	408b      	lsls	r3, r1
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR  |= temp ;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6899      	ldr	r1, [r3, #8]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	609a      	str	r2, [r3, #8]
	temp = 0 ;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]

	// configure the pupd control
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPUPDControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	79db      	ldrb	r3, [r3, #7]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR  &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	4619      	mov	r1, r3
 8000bec:	2303      	movs	r3, #3
 8000bee:	408b      	lsls	r3, r1
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	400a      	ands	r2, r1
 8000bfa:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR  |= temp ;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68d9      	ldr	r1, [r3, #12]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	60da      	str	r2, [r3, #12]
	temp = 0 ;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

	// configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ) ;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7a1b      	ldrb	r3, [r3, #8]
 8000c14:	461a      	mov	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	791b      	ldrb	r3, [r3, #4]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	408b      	lsls	r3, r1
 8000c30:	43db      	mvns	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	400a      	ands	r2, r1
 8000c3a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp ;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6859      	ldr	r1, [r3, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	605a      	str	r2, [r3, #4]
	temp = 0 ;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]


	// configure the alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	795b      	ldrb	r3, [r3, #5]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d131      	bne.n	8000cbc <GPIO_Init+0x35c>
		// configure the alternate function registers
		uint8_t temp1 , temp2 ;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  / 8 ;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	791b      	ldrb	r3, [r3, #4]
 8000c5c:	08db      	lsrs	r3, r3, #3
 8000c5e:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8 ;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	791b      	ldrb	r3, [r3, #4]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	7c3a      	ldrb	r2, [r7, #16]
 8000c70:	3208      	adds	r2, #8
 8000c72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	7c3a      	ldrb	r2, [r7, #16]
 8000c8a:	4001      	ands	r1, r0
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2)) ;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	7c3a      	ldrb	r2, [r7, #16]
 8000c98:	3208      	adds	r2, #8
 8000c9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7a5b      	ldrb	r3, [r3, #9]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	7c3a      	ldrb	r2, [r7, #16]
 8000cb4:	4301      	orrs	r1, r0
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	}

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40013800 	.word	0x40013800
 8000ccc:	40013c00 	.word	0x40013c00

08000cd0 <GPIO_WriteToOutputPin>:
	uint16_t value ;
	value = (uint16_t)(pGPIOx->IDR ) ;
	return value ;

}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx , uint8_t PinNumber , uint8_t Value) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	70bb      	strb	r3, [r7, #2]

	if (Value == GPIO_PIN_SET) {
 8000ce0:	78bb      	ldrb	r3, [r7, #2]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d109      	bne.n	8000cfa <GPIO_WriteToOutputPin+0x2a>
		// write 1 to the bit field corresponding pin number
		pGPIOx->ODR |= (1 << PinNumber) ;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	615a      	str	r2, [r3, #20]

	} else {
		// write 0  to the bit field corresponding pin number
		pGPIOx->ODR &= ~(1 << PinNumber) ;
	}
}
 8000cf8:	e009      	b.n	8000d0e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber) ;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	2101      	movs	r1, #1
 8000d02:	fa01 f202 	lsl.w	r2, r1, r2
 8000d06:	43d2      	mvns	r2, r2
 8000d08:	401a      	ands	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	615a      	str	r2, [r3, #20]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx ,uint16_t Value ) {

	pGPIOx->ODR = Value ;

}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx , uint8_t PinNumber ) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber) ;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	78fa      	ldrb	r2, [r7, #3]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	405a      	eors	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	615a      	str	r2, [r3, #20]

}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <__libc_init_array>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	4d0d      	ldr	r5, [pc, #52]	; (8000d78 <__libc_init_array+0x38>)
 8000d44:	4c0d      	ldr	r4, [pc, #52]	; (8000d7c <__libc_init_array+0x3c>)
 8000d46:	1b64      	subs	r4, r4, r5
 8000d48:	10a4      	asrs	r4, r4, #2
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	42a6      	cmp	r6, r4
 8000d4e:	d109      	bne.n	8000d64 <__libc_init_array+0x24>
 8000d50:	4d0b      	ldr	r5, [pc, #44]	; (8000d80 <__libc_init_array+0x40>)
 8000d52:	4c0c      	ldr	r4, [pc, #48]	; (8000d84 <__libc_init_array+0x44>)
 8000d54:	f000 f818 	bl	8000d88 <_init>
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	10a4      	asrs	r4, r4, #2
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	42a6      	cmp	r6, r4
 8000d60:	d105      	bne.n	8000d6e <__libc_init_array+0x2e>
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d68:	4798      	blx	r3
 8000d6a:	3601      	adds	r6, #1
 8000d6c:	e7ee      	b.n	8000d4c <__libc_init_array+0xc>
 8000d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d72:	4798      	blx	r3
 8000d74:	3601      	adds	r6, #1
 8000d76:	e7f2      	b.n	8000d5e <__libc_init_array+0x1e>
 8000d78:	08000dac 	.word	0x08000dac
 8000d7c:	08000dac 	.word	0x08000dac
 8000d80:	08000dac 	.word	0x08000dac
 8000d84:	08000db0 	.word	0x08000db0

08000d88 <_init>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr

08000d94 <_fini>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	bf00      	nop
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr
